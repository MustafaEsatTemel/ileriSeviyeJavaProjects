<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">
    
    
    <!--values.properties dosyasını xml'imize tanımladık.  -->
    <context:property-placeholder location="classpath:values.properties"/>
    

	<bean id="database" class="springIntro.CustomerDal"> <!-- "Database" isimli bir talep gelirse bana CustomerDal üret.  -->
	
	<!--CustomerDal nesnesi üretirken oradaki connectionString değişkenine value'de belirttiğim değeri ver.
	${} anlamı, values.properties dosyasından çekeceğimiz değerin placeholderi diye düşünebilirsin. İçerisine çekilmesi gereken kısmı yazıyorsun -->
			<property name="connectionString" value="${database.connectionString}"></property>
	</bean>
	
	
	<bean id="service" class="springIntro.CustomerManager"><!--İş kodlarımızı servis eden class hangisi ? CustomerManager  -->

 <!--Önceden örneğimizi constructor injection ile yapmıştık, öyle bir durumda constructora yollanacak class'ı aşağıda tanımladık.  -->
<!-- 		<constructor-arg ref="database"></constructor-arg> -->
			
			<!--Setter injectionumuz için customerDal parametresi alan methoda database'deki class'ı yolla.  -->
			<property name="customerDal" ref="database"></property>
	</bean>
	

</beans>






